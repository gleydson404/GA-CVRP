!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Decimal	Distances.py	/^from decimal import Decimal, ROUND_HALF_UP$/;"	i
ROUND_HALF_UP	Distances.py	/^from decimal import Decimal, ROUND_HALF_UP$/;"	i
best_insertion	GACRVP.py	/^def best_insertion(routes, client, dist_matrix):$/;"	f
biggest_overlap	GACRVP.py	/^def biggest_overlap():$/;"	f
biggest_overlap_cross	GACRVP.py	/^def biggest_overlap_cross(father, mother):$/;"	f
bounding_box	GACRVP.py	/^def bounding_box(individual, customers):$/;"	f
calc_r	GACRVP.py	/^def calc_r(routes, routes_cost, gama, demands, capacity, qtd_customers):$/;"	f
choice	GACRVP.py	/^from random import randint, choice, random$/;"	i
cross_revisor	GACRVP.py	/^def cross_revisor(custumers, childs):$/;"	f
cstrs_list	Test.py	/^cstrs_list = customers[:, 0]$/;"	v
cstrs_list	Testes_Thais.py	/^cstrs_list = customers[:, 0]$/;"	v
date	Testes_Thais.py	/^    date = datetime.datetime.fromtimestamp(time.time()).strftime('%d-%m-%Y-%H%M%S')$/;"	v
datetime	Testes_Thais.py	/^import datetime$/;"	i
demands	Testes_Thais.py	/^demands = customers[:, 3]$/;"	v
dist_matrix	Test.py	/^dist_matrix = gen_dist_matrix(qtd_customers, customers)$/;"	v
dist_matrix	Testes_Thais.py	/^dist_matrix = gen_dist_matrix(qtd_customers, customers)$/;"	v
dist_veiculo	GACRVP.py	/^def dist_veiculo(routes_ind, dist_matrix, qtd_customers,$/;"	f
distancia_centroides	GACRVP.py	/^def distancia_centroides(individual, customers):$/;"	f
ec	GACRVP.py	/^from Distances import euclidian as ec$/;"	i
elitims	GACRVP.py	/^def elitims(tx_elitims, pop, size_pop):$/;"	f
euclidian	Distances.py	/^def euclidian(a, b):$/;"	f
euclidian	Test.py	/^from Distances import euclidian$/;"	i
euclidian	Testes_Thais.py	/^from Distances import euclidian$/;"	i
evolve	GACRVP.py	/^def evolve(pop, params, dist_matrix, qtd_customers,$/;"	f
execucao	Testes_Thais.py	/^    execucao = execucao + 1$/;"	v
execucao	Testes_Thais.py	/^execucao = 0$/;"	v
fitness_execucoes	Testes_Thais.py	/^fitness_execucoes = []$/;"	v
fitness_ind	GACRVP.py	/^def fitness_ind(individual, dist_matrix, qtd_customers,$/;"	f
fitness_pop	GACRVP.py	/^def fitness_pop(populacao, dist_matrix, qtd_customers,$/;"	f
gama	Test.py	/^gama = 1$/;"	v
gama	Testes_Thais.py	/^gama = 1$/;"	v
gc	GACRVP.py	/^import gc$/;"	i
gen_dist_matrix	GACRVP.py	/^def gen_dist_matrix(qtd_customers, customers):$/;"	f
gen_ind	GACRVP.py	/^def gen_ind(qtd_vehicles, qtd_customers, cstrs_list):$/;"	f
gen_pop	GACRVP.py	/^def gen_pop(size, qtd_vcls, qtd_cstrs, cstrs_list):$/;"	f
geracao	Testes_Thais.py	/^        geracao = geracao + 1$/;"	v
geracao	Testes_Thais.py	/^    geracao = 0$/;"	v
get_individual_from_vehicle	GACRVP.py	/^def get_individual_from_vehicle(routes, qtd_vehicles):$/;"	f
get_routes_per_vehicle	GACRVP.py	/^def get_routes_per_vehicle(individual, size_individual):$/;"	f
horizontal_line_cross	GACRVP.py	/^def horizontal_line_cross(father, mother):$/;"	f
intersect_area	GACRVP.py	/^def intersect_area(individual, customers):$/;"	f
itemgetter	Testes_Thais.py	/^from operator import itemgetter$/;"	i
json	GACRVP.py	/^import json$/;"	i
load	GACRVP.py	/^from LoadTests import load$/;"	i
load	LoadTests.py	/^def load(file):$/;"	f
load_parameters	GACRVP.py	/^def load_parameters(file):$/;"	f
m	Distances.py	/^import math as m$/;"	i
main	GACRVP.py	/^def main():$/;"	f
melhor_fit	Testes_Thais.py	/^    melhor_fit = []$/;"	v
min_melhor_fit	Testes_Thais.py	/^    min_melhor_fit = min(melhor_fit, key=itemgetter(0))$/;"	v
np	Distances.py	/^import numpy as np$/;"	i
np	GACRVP.py	/^import numpy as np$/;"	i
np	LoadTests.py	/^import numpy as np$/;"	i
np	Test.py	/^import numpy as np$/;"	i
np	Testes_Thais.py	/^import numpy as np$/;"	i
over_capacity	GACRVP.py	/^def over_capacity(individual, demands, capacity, size_individual):$/;"	f
over_capacity_per_route	GACRVP.py	/^def over_capacity_per_route(route, demands, capacity):$/;"	f
params	Test.py	/^params = load_parameters("config.json")$/;"	v
params	Testes_Thais.py	/^params = load_parameters("config.json")$/;"	v
pokemon	Testes_Thais.py	/^def pokemon(pop, dist_matrix, qtd_customers, qtd_vehicles, capacity, gama, size):$/;"	f
pop	Test.py	/^pop = gen_pop(10, qtd_vehicles, qtd_customers, cstrs_list)$/;"	v
pop	Testes_Thais.py	/^    pop = gen_pop(params['tamanho_pop'], qtd_vehicles, qtd_customers, cstrs_list)$/;"	v
pop	Testes_Thais.py	/^pop = gen_pop(params['tamanho_pop'], qtd_vehicles, qtd_customers, cstrs_list)$/;"	v
pprint	Test.py	/^import pprint$/;"	i
pprint	Testes_Thais.py	/^import pprint$/;"	i
randint	GACRVP.py	/^from random import randint, choice, random$/;"	i
random	GACRVP.py	/^from random import randint, choice, random$/;"	i
resultado	Testes_Thais.py	/^    resultado = open("\/home\/gcs\/Desktop\/" + date + ".txt", "w")$/;"	v
reverse_mutation	GACRVP.py	/^def reverse_mutation(individual, size_ind, qtd_vehicles):$/;"	f
roleta	GACRVP.py	/^def roleta(populacao, fitness, max_fitness, min_fitness, fitness_total):$/;"	f
simple_mutation	GACRVP.py	/^def simple_mutation(individual, dist_matrix, qtd_vehicles):$/;"	f
simple_one_point_cross	GACRVP.py	/^def simple_one_point_cross(father, mother, pop, custumers):$/;"	f
simple_random_cross	GACRVP.py	/^def simple_random_cross(pop, father, mother, dist_matrix, qtd_vehicles, custumers):$/;"	f
simple_two_points_cross	GACRVP.py	/^def simple_two_points_cross(pop, father, mother, custumers):$/;"	f
size	Test.py	/^size = len(tst)$/;"	v
size	Testes_Thais.py	/^        size = len(pop[0])$/;"	v
swap_mutation	GACRVP.py	/^def swap_mutation(individual):$/;"	f
tbis	Test.py	/^tbis = ['25', '16', '26', '2', '14', '20', '19', '24', '1', '#', '27', '#', '21', '22', '23', '28',$/;"	v
time	Testes_Thais.py	/^import time$/;"	i
tst	Test.py	/^tst = ['13', '2', '17', '31', '#',$/;"	v
tst	Test.py	/^tst = ['21', '31', '19', '17', '13', '7', '26', '#',$/;"	v
uniform_cross	GACRVP.py	/^def uniform_cross(father, mother, dist_matrix,$/;"	f
