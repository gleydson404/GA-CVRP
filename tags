!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
best_insertion	GACRVP.py	/^def best_insertion(routes, client):$/;"	f
biggest_overlap_cross	GACRVP.py	/^def biggest_overlap_cross(father, mother):$/;"	f
bounding_box	GACRVP.py	/^def bounding_box(individual):$/;"	f
calc_r	GACRVP.py	/^def calc_r(routes, routes_cost, gama, demands, capacity, qtd_customers):$/;"	f
choice	GACRVP.py	/^from random import randint, choice, random$/;"	i
cstrs_list	Test.py	/^cstrs_list = customers[:, 0]$/;"	v
dist_matrix	Test.py	/^dist_matrix = gen_dist_matrix(qtd_customers, customers)$/;"	v
dist_veiculo	GACRVP.py	/^def dist_veiculo(routes, dist_matrix, qtd_customers,$/;"	f
ec	GACRVP.py	/^from Distances import euclidian as ec$/;"	i
elitims	GACRVP.py	/^def elitims(tx_elitims, pop, size_pop):$/;"	f
euclidian	Distances.py	/^def euclidian(a, b):$/;"	f
euclidian	Test.py	/^from Distances import euclidian$/;"	i
evolve	GACRVP.py	/^def evolve(pop, params, dist_matrix, qtd_customers,$/;"	f
fitness_ind	GACRVP.py	/^def fitness_ind(individual, dist_matrix, qtd_customers,$/;"	f
fitness_pop	GACRVP.py	/^def fitness_pop(populacao, dist_matrix, qtd_customers,$/;"	f
gama	Test.py	/^gama = 1$/;"	v
gc	GACRVP.py	/^import gc$/;"	i
gen_dist_matrix	GACRVP.py	/^def gen_dist_matrix(qtd_customers, customers):$/;"	f
gen_ind	GACRVP.py	/^def gen_ind(qtd_vehicles, qtd_customers, cstrs_list):$/;"	f
gen_pop	GACRVP.py	/^def gen_pop(size, qtd_vcls, qtd_cstrs, cstrs_list):$/;"	f
get_individual_from_vehicle	GACRVP.py	/^def get_individual_from_vehicle(routes, qtd_vehicles):$/;"	f
get_routes_per_vehicle	GACRVP.py	/^def get_routes_per_vehicle(individual, size_individual):$/;"	f
horizontal_line_cross	GACRVP.py	/^def horizontal_line_cross(father, mother):$/;"	f
json	GACRVP.py	/^import json$/;"	i
load	GACRVP.py	/^from LoadTests import load$/;"	i
load	LoadTests.py	/^def load(file):$/;"	f
load_parameters	GACRVP.py	/^def load_parameters(file):$/;"	f
m	Distances.py	/^import math as m$/;"	i
main	GACRVP.py	/^def main():$/;"	f
np	GACRVP.py	/^import numpy as np$/;"	i
np	LoadTests.py	/^import numpy as np$/;"	i
np	Test.py	/^import numpy as np$/;"	i
over_capacity	GACRVP.py	/^def over_capacity(individual, demands, capacity, size_individual):$/;"	f
over_capacity_per_route	GACRVP.py	/^def over_capacity_per_route(route, demands, capacity):$/;"	f
p1	Test.py	/^p1 = ['4', '5', '7', '#', '10', '#', '#', '6', '#', '9', '1', '2', '8','3']$/;"	v
p2	Test.py	/^p2 = ['9', '1', '7', '6', '#', '10', '2', '5', '#', '8', '4', '#', '3','#']$/;"	v
params	Test.py	/^params = load_parameters("config.json")$/;"	v
pop	Test.py	/^pop = gen_pop(10, qtd_vehicles, qtd_customers, cstrs_list)$/;"	v
randint	GACRVP.py	/^from random import randint, choice, random$/;"	i
random	GACRVP.py	/^from random import randint, choice, random$/;"	i
reverse_mutation	GACRVP.py	/^def reverse_mutation(individual):$/;"	f
roleta	GACRVP.py	/^def roleta(populacao, fitness, max_fitness, min_fitness, fitness_total):$/;"	f
simple_mutation	GACRVP.py	/^def simple_mutation(individual):$/;"	f
simple_one_point_cross	GACRVP.py	/^def simple_one_point_cross(father, mother):$/;"	f
simple_random_cross	GACRVP.py	/^def simple_random_cross(father, mother):$/;"	f
simple_two_points_cross	GACRVP.py	/^def simple_two_points_cross(father, mother):$/;"	f
swap_mutation	GACRVP.py	/^def swap_mutation(individual):$/;"	f
uniform_cross	GACRVP.py	/^def uniform_cross(father, mother, dist_matrix,$/;"	f
